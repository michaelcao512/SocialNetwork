pipeline {
    agent any
    environment {
        DOCKER_IMAGE = "kris206/socialmedia"
        EC2_HOST = "***.***.***.***" //change to your own AWS EC2 backend server IP addr
        EC2_USER = "ubuntu"
    }
    stages {
        stage('Clone Code') {
            steps {
                git branch: 'main', url: 'https://github.com/michaelcao512/SocialNetwork.git'
            }
        }
        stage('Build JAR') {
            steps {
                dir('socialmedia') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${DOCKER_IMAGE}", '-f socialmedia/Dockerfile socialmedia')
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', '7e06f73d-eea7-47fc-b0f8-7bce9c9e0384') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        stage('Deploy to Target Instance') {
            steps {
                sshagent(['jenkins-ec2-key']) {
                    withCredentials([
                        string(credentialsId: 'DB_URL', variable: 'DB_URL'),
                        string(credentialsId: 'DB_USERNAME', variable: 'DB_USERNAME'),
                        string(credentialsId: 'DB_PASSWORD', variable: 'DB_PASSWORD'),
                        string(credentialsId: 'jwt.secret', variable: 'JWT_SECRET'),
                        string(credentialsId: 'S3.access.key', variable: 'S3_ACCESS_KEY'),
                        string(credentialsId: 'S3.secret.key', variable: 'S3_SECRET_KEY'),
                        string(credentialsId: 'S3.region', variable: 'S3_REGION'),
                        string(credentialsId: 'S3.bucket.name', variable: 'S3_BUCKET_NAME')
                        string(credentialsId: 'MAIL_HOST', variable: 'MAIL_HOST'),
                        string(credentialsId: 'MAIL_USERNAME', variable: 'MAIL_USERNAME'),
                        string(credentialsId: 'MAIL_PASSWORD', variable: 'MAIL_PASSWORD'),
                        string(credentialsId: 'VERIFICATION_URL', variable: 'VERIFICATION_URL'),
                        string(credentialsId: 'cors.allowed.origins', variable: 'ALLOWED_ORIGINS')
                    ]) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} \
                            "docker pull ${DOCKER_IMAGE}:latest && \
                            docker stop socialmedia || true && \
                            docker rm socialmedia || true && \
                            docker run -d -p 8080:8080 \
                              -e DB_URL='${DB_URL}' \
                              -e DB_USERNAME='${DB_USERNAME}' \
                              -e DB_PASSWORD='${DB_PASSWORD}' \
                              -e JWT_SECRET='${JWT_SECRET}' \
                              -e S3_ACCESS_KEY='${S3_ACCESS_KEY}' \
                              -e S3_SECRET_KEY='${S3_SECRET_KEY}' \
                              -e S3_REGION='${S3_REGION}' \
                              -e S3_BUCKET_NAME='${S3_BUCKET_NAME}' \
                              -e MAIL_HOST='${MAIL_HOST}' \
                              -e MAIL_USERNAME='${MAIL_USERNAME}' \
                              -e MAIL_PASSWORD='${MAIL_PASSWORD}' \
                              -e VERIFICATION_URL='${VERIFICATION_URL}' \
                              -e ALLOWED_ORIGINS='${ALLOWED_ORIGINS}' \
                              --name socialmedia \
                              ${DOCKER_IMAGE}:latest"
                        """
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline execution failed. Check logs for details.'
        }
    }
}